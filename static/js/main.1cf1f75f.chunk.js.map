{"version":3,"sources":["component/stopwatch/stopwatch.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Stopwatch","useState","time","setTime","isRunning","setIsRunning","useEffect","unsubscribe","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","hour","Math","floor","slice","minute","second","className","id","type","onClick","waitBtn","document","getElementById","click$","fromEvent","buffer","debounceTime","map","clicks","length","filter","clicksLength","_","prevState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uVAiFeA,EA3EG,WACd,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACN,IAAMC,EAAc,IAAIC,IAQxB,OAPAC,YAAS,IACJC,KAAKC,YAAUJ,IACfK,WAAU,WACHR,GACAD,GAAQ,SAAAU,GAAG,OAAIA,EAAM,QAG1B,WACHN,EAAYO,OACZP,EAAYQ,cAEjB,CAACX,IAEJ,IAAIY,GAAQ,IAAMC,KAAKC,MAAOhB,EAAI,KAAuB,KAAKiB,OAAO,GACjEC,GAAU,IAAMH,KAAKC,MAAMhB,EAAO,MAAOiB,OAAO,GAChDE,GAAU,IAAMJ,KAAKC,MAAOhB,EAAO,IAAO,KAAKiB,OAAO,GAqB1D,OACI,sBAAKG,UAAU,YAAf,UACI,qBAAKA,UAAU,QAAf,SACI,6CAEJ,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,uBAAf,SACI,uBAAMA,UAAU,aAAhB,UAA8BN,EAA9B,IAAqCI,EAArC,IAA8CC,OAElD,sBAAKC,UAAU,oBAAf,WACoB,IAAdlB,EACE,wBAAQmB,GAAG,aAAaC,KAAK,SAASC,QA9BtC,WAChBpB,GAAa,IA6BG,mBACA,wBAAQkB,GAAG,aAAaC,KAAK,SAASC,QA3BvC,WACfpB,GAAa,GACbF,EAAQ,IAyBQ,kBACJ,wBAAQoB,GAAG,OAAOC,KAAK,SAASC,QAAS,WACrC,IAAMC,EAAUC,SAASC,eAAe,QAClCC,EAASC,YAAUJ,EAAS,SACbG,EAAOnB,KACxBqB,YAAOF,EAAOnB,KAAKsB,YAAa,OAChCC,aAAI,SAACC,GAAD,OAAYA,EAAOC,UACvBC,aAAO,SAACC,GAAD,OAAkBA,GAAgB,MAGhCzB,WAAU,SAAC0B,GA1BxCjC,GAAa,SAAAkC,GAAS,OAAKA,SAiBf,kBAcA,wBAAQhB,GAAG,QAAQC,KAAK,SAASC,QArC7B,WAChBtB,EAAQ,GACRE,GAAa,IAmCD,6B,MChELmC,MARf,WACE,OACE,qBAAKlB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAASC,eAAe,SAM1Ba,M","file":"static/js/main.1cf1f75f.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./stopwatch.style.css\"\r\nimport {useState, useEffect} from \"react\";\r\nimport {interval, Subject, fromEvent} from \"rxjs\";\r\nimport {takeUntil, map, buffer, filter, debounceTime} from \"rxjs/operators\";\r\n\r\nconst Stopwatch = () => {\r\n    const [time, setTime] = useState(0);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = new Subject();\r\n        interval(10)\r\n            .pipe(takeUntil(unsubscribe))\r\n            .subscribe(() => {\r\n                if (isRunning) {\r\n                    setTime(val => val + 1);\r\n                }\r\n            });\r\n        return () => {\r\n            unsubscribe.next();\r\n            unsubscribe.complete();\r\n        };\r\n    }, [isRunning]);\r\n\r\n    let hour = ('0' + Math.floor((time / (1000 * 60 * 60)) % 24)).slice(-2);\r\n    let minute = ('0' + Math.floor(time / 6000)).slice(-2);\r\n    let second = ('0' + Math.floor((time / 100) % 60)).slice(-2);\r\n\r\n    const handleStart = () => {\r\n        setIsRunning(true);\r\n    }\r\n\r\n    const handleStop = () => {\r\n        setIsRunning(false);\r\n        setTime(0);\r\n    }\r\n\r\n    const handleReset = () => {\r\n        setTime(0);\r\n        setIsRunning(true);\r\n    }\r\n\r\n    const handleWait = () => {\r\n        setIsRunning(prevState => !prevState);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='stopwatch'>\r\n            <div className='title'>\r\n                <h1>Stopwatch</h1>\r\n            </div>\r\n            <div className='main_container'>\r\n                <div className='clock_face_container'>\r\n                    <span className='clock_face'>{hour}:{minute}:{second}</span>\r\n                </div>\r\n                <div className='stopwatch_buttons'>\r\n                    {(isRunning === false) ?\r\n                        <button id='start_stop' type=\"button\" onClick={handleStart}>Start</button> :\r\n                        <button id='start_stop' type=\"button\" onClick={handleStop}>Stop</button>}\r\n                    <button id='wait' type=\"button\" onClick={() => {\r\n                        const waitBtn = document.getElementById('wait')\r\n                        const click$ = fromEvent(waitBtn, 'click');\r\n                        const doubleClick$ = click$.pipe(\r\n                            buffer(click$.pipe(debounceTime(300))),\r\n                            map((clicks) => clicks.length),\r\n                            filter((clicksLength) => clicksLength >= 2)\r\n                        );\r\n\r\n                        doubleClick$.subscribe((_) => {\r\n                            handleWait();\r\n                        });\r\n                    }}>Wait\r\n                    </button>\r\n                    <button id='reset' type=\"button\" onClick={handleReset}>Reset</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Stopwatch;","import Stopwatch from \"./component/stopwatch/stopwatch.component\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Stopwatch/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}